/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layer definitions
    #define BASE 0
    #define NAV  1
    #define NUM 2
    #define FUN 3
    #define SYS 4
    #define MOUSE 5


&mt {
//tapping-term-ms = <200>;
};

&sk {
    ignore-modifiers;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            bindings = <&kp N>, <&kp LS(INS)>;
        };

        copy_paste: copy_paste {
            compatible = "zmk,behavior-mod-morph";
            label = "COPY_PASTE";
            bindings = <&kp LS(INS)>, <&kp LC(INS)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };

        a_left_alt: a_left_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "A_LEFT_ALT";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp LEFT_ALT>;

            tapping-term-ms = <175>;
        };

        l_right_alt: l_right_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "L_RIGHT_ALT";
            #binding-cells = <0>;
            bindings = <&kp L>, <&kp LEFT_ALT>;

            tapping-term-ms = <175>;
        };

        y_shift_f6: y_shift_f6 {
            compatible = "zmk,behavior-tap-dance";
            label = "Y_SHIFT_F6";
            #binding-cells = <0>;
            bindings = <&kp Y>, <&kp LS(F6)>;

            tapping-term-ms = <175>;
        };

        o_shift_f9: o_shift_f9 {
            compatible = "zmk,behavior-tap-dance";
            label = "O_SHIFT_F9";
            #binding-cells = <0>;
            bindings = <&kp O>, <&kp LS(F9)>;

            tapping-term-ms = <175>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q        &kp W  &kp E           &kp R           &kp T        &y_shift_f6  &kp U        &kp I      &o_shift_f9   &kp P                   &kp BSPC
&kp TAB     &a_left_alt  &kp S  &kp D           &kp F           &kp G        &kp H        &kp J        &kp K      &l_right_alt  &mt LEFT_GUI SEMICOLON  &kp SQT
&kp LCTRL   &kp Z        &kp X  &kp C           &kp V           &kp B        &kp N        &kp M        &kp COMMA  &kp DOT       &kp FSLH                &kp ENTER
                                &kp LEFT_SHIFT  &lt 1 LEFT_GUI  &lt 5 TAB    &kp ENTER    &lt 2 SPACE  &lt 3 DEL
            >;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans            &kp N1  &kp N2  &kp N3  &kp N4  &kp N5       &kp N6    &kp N7    &kp N8         &kp N9     &kp N0   &kp BSPC
&trans            &trans  &trans  &trans  &trans  &trans       &kp LEFT  &kp DOWN  &kp UP         &kp RIGHT  &trans   &trans
&kp LC(LEFT_GUI)  &trans  &trans  &trans  &trans  &trans       &kp INS   &kp HOME  &kp PAGE_DOWN  &kp PG_UP  &kp END  &trans
                                  &trans  &trans  &kp SPACE    &kp RET   &trans    &kp RALT
            >;
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp N7  &kp N8    &kp N9  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &kp N4  &kp N5    &kp N6  &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &kp N1  &kp N2    &kp N3  &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &kp N0  &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        fun {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &trans     &trans          &trans           &trans  &trans  &trans  &trans  &trans
&kp F11  &kp F4  &kp F5  &kp F6  &trans     &trans          &trans           &trans  &trans  &trans  &trans  &trans
&kp F10  &kp F1  &kp F2  &kp F3  &trans     &trans          &kp PRINTSCREEN  &trans  &trans  &trans  &trans  &trans
                         &trans  &kp LCTRL  &kp LEFT_ALT    &trans           &trans  &trans
            >;
        };

        sys {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &bt BT_CLR_ALL
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &copy_paste  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans       &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        show_sys {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
